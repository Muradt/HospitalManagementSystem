/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ehospital.gui.main;

import ehospital.gui.add.NewDoctorFrame;
import ehospital.gui.add.NewPatientFrame;
import ehospital.gui.add.NewPaymentFrame;
import ehospital.gui.add.NewReceiptFrame;
import ehospital.gui.add.NewRegistrationFrame;
import ehospital.gui.edit.EditDoctorFrame;
import ehospital.gui.edit.EditPatientFrame;
import ehospital.gui.edit.EditPaymentFrame;
import ehospital.gui.edit.EditReceiptFrame;
import ehospital.gui.edit.EditRegistrationFrame;
import ehospital.gui.login.LoginFrame;
import ehospital.model.Doctor;
import ehospital.model.Patient;
import ehospital.model.Payment;
import ehospital.model.Receipt;
import ehospital.model.Registration;
import ehospital.service.DiseaseService;
import ehospital.service.DoctorService;
import ehospital.service.PatientService;
import ehospital.service.PaymentService;
import ehospital.service.ReceiptService;
import ehospital.service.RegistrationService;
import ehospital.service.RoomService;
import java.awt.Image;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hp
 */
public class MainFrame extends javax.swing.JFrame {

    private PatientService patientService;
    private DoctorService doctorService;
    private RegistrationService registrationService;
    private PaymentService paymentService;
    private ReceiptService receiptService;
    private DiseaseService diseaseService;
    private RoomService roomService;
    private String userType;
    private String btnCurrent = "";

    /**
     * Creates new form MainFrame
     */
    public MainFrame(PatientService patientService, DoctorService doctorService, RegistrationService registrationService, PaymentService paymentService, ReceiptService receiptService, DiseaseService diseaseService, RoomService roomService, String userType) {
        initComponents();

        this.patientService = patientService;
        this.doctorService = doctorService;
        this.registrationService = registrationService;
        this.paymentService = paymentService;
        this.receiptService = receiptService;
        this.diseaseService = diseaseService;
        this.roomService = roomService;
        this.userType = userType;
        grantrole();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnNew = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblNewIcon = new javax.swing.JLabel();
        lblEditIcon = new javax.swing.JLabel();
        lblDeleteIcon = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btdSignOut = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btnPatientData = new javax.swing.JButton();
        btnDoctorData = new javax.swing.JButton();
        btnRegistrationData = new javax.swing.JButton();
        btnPaymentData = new javax.swing.JButton();
        btnReceiptData = new javax.swing.JButton();
        lblRegisterIcn = new javax.swing.JLabel();
        lblDoctorIcn = new javax.swing.JLabel();
        lblPatientIcn = new javax.swing.JLabel();
        lblReceiptIcn = new javax.swing.JLabel();
        lblPaymentIcn = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblGeneral = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel2.setMaximumSize(new java.awt.Dimension(0, 0));
        jPanel2.setMinimumSize(new java.awt.Dimension(1000, 0));
        jPanel2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jPanel2ComponentResized(evt);
            }
        });

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblNewIcon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblEditIcon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblDeleteIcon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btdSignOut.setText("Sign Out");
        btdSignOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btdSignOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNewIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblEditIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDeleteIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                .addComponent(btdSignOut)
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNewIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDeleteIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblEditIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btdSignOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch))))
                .addGap(24, 24, 24))
        );

        ImageIcon imageIcon5 = new ImageIcon("C:\\Users\\hp\\Desktop\\Java\\iconsEhospital\\newIcon.png"); // load the image to a imageIcon
        Image image5 = imageIcon5.getImage(); // transform it
        Image newimg5 = image5.getScaledInstance(38, 45, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way
        imageIcon5 = new ImageIcon(newimg5);  // transform it back}
    lblNewIcon.setIcon(imageIcon5);
    ImageIcon imageIcon6 = new ImageIcon("C:\\Users\\hp\\Desktop\\Java\\iconsEhospital\\editIcon.png"); // load the image to a imageIcon
    Image image6 = imageIcon6.getImage(); // transform it
    Image newimg6 = image6.getScaledInstance(38, 45, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way
    imageIcon6 = new ImageIcon(newimg6);  // transform it back}
    lblEditIcon.setIcon(imageIcon6);
    ImageIcon imageIcon7 = new ImageIcon("C:\\Users\\hp\\Desktop\\Java\\iconsEhospital\\updateIcon.png"); // load the image to a imageIcon
    Image image7 = imageIcon7.getImage(); // transform it
    Image newimg7 = image7.getScaledInstance(38, 45, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way
    imageIcon7 = new ImageIcon(newimg7);  // transform it back}
    lblDeleteIcon.setIcon(imageIcon7);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addGap(0, 21, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

    btnPatientData.setText("Patient Data");
    btnPatientData.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnPatientDataActionPerformed(evt);
        }
    });

    btnDoctorData.setText("Doctor Data");
    btnDoctorData.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnDoctorDataActionPerformed(evt);
        }
    });

    btnRegistrationData.setText("Registration Data");
    btnRegistrationData.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnRegistrationDataActionPerformed(evt);
        }
    });

    btnPaymentData.setText("Payment Data");
    btnPaymentData.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnPaymentDataActionPerformed(evt);
        }
    });

    btnReceiptData.setText("Receipt Data");
    btnReceiptData.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnReceiptDataActionPerformed(evt);
        }
    });

    lblRegisterIcn.setAutoscrolls(true);
    lblRegisterIcn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

    lblDoctorIcn.setAutoscrolls(true);
    lblDoctorIcn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

    lblPatientIcn.setAutoscrolls(true);
    lblPatientIcn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

    lblReceiptIcn.setAutoscrolls(true);
    lblReceiptIcn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

    lblPaymentIcn.setAutoscrolls(true);
    lblPaymentIcn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnPatientData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReceiptData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPaymentData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblReceiptIcn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPaymentIcn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPatientIcn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnDoctorData, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRegistrationData, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                    .addGap(18, 18, 18)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblDoctorIcn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblRegisterIcn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap())
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addGap(38, 38, 38)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(btnPatientData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblPatientIcn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(31, 31, 31)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(lblDoctorIcn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDoctorData, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(32, 32, 32)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(lblRegisterIcn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRegistrationData, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(37, 37, 37)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(btnPaymentData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblPaymentIcn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(42, 42, 42)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(lblReceiptIcn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnReceiptData, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    ImageIcon imageIcon = new ImageIcon("C:\\Users\\hp\\Desktop\\Java\\iconsEhospital\\rgstricon.png"); // load the image to a imageIcon
    Image image = imageIcon.getImage(); // transform it
    Image newimg = image.getScaledInstance(40, 45, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way
    imageIcon = new ImageIcon(newimg);  // transform it back}
    lblRegisterIcn.setIcon(imageIcon);
    ImageIcon imageIcon2 = new ImageIcon("C:\\Users\\hp\\Desktop\\Java\\iconsEhospital\\doctoricon.png"); // load the image to a imageIcon
    Image image2 = imageIcon2.getImage(); // transform it
    Image newimg2 = image2.getScaledInstance(40, 45, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way
    imageIcon2 = new ImageIcon(newimg2);  // transform it back}
    lblDoctorIcn.setIcon(imageIcon2);
    ImageIcon imageIcon1 = new ImageIcon("C:\\Users\\hp\\Desktop\\Java\\iconsEhospital\\patienticon.png"); // load the image to a imageIcon
    Image image1 = imageIcon1.getImage(); // transform it
    Image newimg1 = image1.getScaledInstance(40, 45, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way
    imageIcon1 = new ImageIcon(newimg1);  // transform it back}
    lblPatientIcn.setIcon(imageIcon1);
    ImageIcon imageIcon4 = new ImageIcon("C:\\Users\\hp\\Desktop\\Java\\iconsEhospital\\receipticon.png"); // load the image to a imageIcon
    Image image4 = imageIcon4.getImage(); // transform it
    Image newimg4 = image4.getScaledInstance(40, 45, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way
    imageIcon4 = new ImageIcon(newimg4);  // transform it back}
    lblReceiptIcn.setIcon(imageIcon4);
    ImageIcon imageIcon3 = new ImageIcon("C:\\Users\\hp\\Desktop\\Java\\iconsEhospital\\paymenticon.png"); // load the image to a imageIcon
    Image image3 = imageIcon3.getImage(); // transform it
    Image newimg3 = image3.getScaledInstance(40, 45, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way
    imageIcon3 = new ImageIcon(newimg3);  // transform it back}
    lblPaymentIcn.setIcon(imageIcon3);

    jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

    tblGeneral.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {

        }
    ));
    jScrollPane1.setViewportView(tblGeneral);

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel4Layout.createSequentialGroup()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 755, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
    );
    jPanel4Layout.setVerticalGroup(
        jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPatientDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientDataActionPerformed
        try {
            showPatientData(patientService.getPatientList());
            btnCurrent = "patient";
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnPatientDataActionPerformed


    private void btnRegistrationDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrationDataActionPerformed
        showRegistrationData();
        btnCurrent = "registration";
    }//GEN-LAST:event_btnRegistrationDataActionPerformed

    private void btnReceiptDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReceiptDataActionPerformed
        btnNew.setVisible(true);
        lblNewIcon.setVisible(true);
        btnEdit.setVisible(true);
        lblEditIcon.setVisible(true);
        showReceiptData();
        btnCurrent = "receipt";
    }//GEN-LAST:event_btnReceiptDataActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        try {
            int rowIndex = tblGeneral.getSelectedRow();
            if (rowIndex == -1) {
                JOptionPane.showMessageDialog(null, "First choose item from table", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            Long selectedRow = (Long) tblGeneral.getValueAt(rowIndex, 0);
            switch (btnCurrent) {
                case "patient":
                    EditPatientFrame editPatientFrame = new EditPatientFrame(patientService, selectedRow);
                    editPatientFrame.setVisible(true);
                     {
                        try {
                            showPatientData(patientService.getPatientList());
                        } catch (Exception ex) {
                            ex.printStackTrace();
                        }
                    }
                    break;

                case "doctor":
                    EditDoctorFrame editDoctorFrame = new EditDoctorFrame(doctorService, selectedRow);
                    editDoctorFrame.setVisible(true);
                    List<Doctor> doctors = doctorService.getDoctorList();
                    showDoctorData(doctors);
                    break;
                case "registration":
                    EditRegistrationFrame editRegistrationFrame = new EditRegistrationFrame(registrationService, patientService, doctorService, diseaseService, roomService, selectedRow);
                    editRegistrationFrame.setVisible(true);
                    showRegistrationData();
                    break;
                case "payment":
                    EditPaymentFrame editPaymentFrame = new EditPaymentFrame(paymentService, registrationService, selectedRow);
                    editPaymentFrame.setVisible(true);
                    showPaymentData();
                    break;
                case "receipt":
                    EditReceiptFrame editReceiptFrame = new EditReceiptFrame(patientService, doctorService, diseaseService, registrationService, receiptService, selectedRow);
                    editReceiptFrame.setVisible(true);
                    showReceiptData();
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Please first choose menu.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        switch (btnCurrent) {
            case "patient":
                NewPatientFrame newPatientFrame = new NewPatientFrame(patientService);
                newPatientFrame.setVisible(true);
                 {
                    try {
                        showPatientData(patientService.getPatientList());
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
                break;

            case "doctor":
                NewDoctorFrame newDoctorFrame = new NewDoctorFrame(doctorService);
                newDoctorFrame.setVisible(true);
                List<Doctor> doctors;
                try {
                    doctors = doctorService.getDoctorList();
                    showDoctorData(doctors);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }

                break;
            case "registration":
                NewRegistrationFrame newRegistrationFrame = new NewRegistrationFrame(registrationService, patientService, doctorService, diseaseService, roomService);
                newRegistrationFrame.setVisible(true);
                showRegistrationData();
                break;
            case "payment":
                NewPaymentFrame newPaymentFrame = new NewPaymentFrame(paymentService, registrationService);
                newPaymentFrame.setVisible(true);
                showPaymentData();
                break;
            case "receipt":
                NewReceiptFrame newReceiptFrame = new NewReceiptFrame(patientService, doctorService, diseaseService, registrationService, receiptService);
                newReceiptFrame.setVisible(true);
                showReceiptData();
                break;
            default:
                JOptionPane.showMessageDialog(null, "Please first choose menu.", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnNewActionPerformed

    private void btnDoctorDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoctorDataActionPerformed
        try {
            List<Doctor> doctors = doctorService.getDoctorList();
            showDoctorData(doctors);
            btnCurrent = "doctor";
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnDoctorDataActionPerformed

    private void btnPaymentDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaymentDataActionPerformed
        showPaymentData();
        btnCurrent = "payment";
    }//GEN-LAST:event_btnPaymentDataActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int rowIndex = tblGeneral.getSelectedRow();
        if (rowIndex == -1) {
            JOptionPane.showMessageDialog(null, "First choose item from table", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Long selectedRow = (Long) tblGeneral.getValueAt(rowIndex, 0);
        switch (btnCurrent) {
            case "patient":
                try {
                int isDelete = JOptionPane.showConfirmDialog(null, "Are you sure ? ", "Delete", JOptionPane.YES_NO_OPTION);
                if (isDelete == JOptionPane.YES_OPTION) {
                    patientService.deletePatient(selectedRow);
                    JOptionPane.showMessageDialog(null, "Patient has been successfully deleted !");
                    showPatientData(patientService.getPatientList());
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Patient has not been successfully deleted !");
                ex.printStackTrace();
            }
            break;
            case "doctor":
                     try {
                int isDelete = JOptionPane.showConfirmDialog(null, "Are you sure ? ", "Delete", JOptionPane.YES_NO_OPTION);
                if (isDelete == JOptionPane.YES_OPTION) {
                    doctorService.deleteDoctor(selectedRow);
                    JOptionPane.showMessageDialog(null, "Doctor has been successfully deleted !");
                    List<Doctor> doctors = doctorService.getDoctorList();
                    showDoctorData(doctors);
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Doctor has not been successfully deleted !");
                ex.printStackTrace();
            }
            break;
            case "registration":
                     try {
                int isDelete = JOptionPane.showConfirmDialog(null, "Are you sure ? ", "Delete", JOptionPane.YES_NO_OPTION);
                if (isDelete == JOptionPane.YES_OPTION) {
                    registrationService.deleteRegistration(selectedRow);
                    JOptionPane.showMessageDialog(null, "Registration has been successfully deleted !");
                    showRegistrationData();
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Registration has not been successfully deleted !");
                ex.printStackTrace();
            }
            break;
            case "payment":
                      try {
                int isDelete = JOptionPane.showConfirmDialog(null, "Are you sure ? ", "Delete", JOptionPane.YES_NO_OPTION);
                if (isDelete == JOptionPane.YES_OPTION) {
                    registrationService.changeRegistrationStatus(paymentService.getPaymentbyId(selectedRow).getRegistration().getId(), 1);
                    paymentService.deletePayment(selectedRow);
                    JOptionPane.showMessageDialog(null, "Payment has been successfully deleted !");
                    showPaymentData();
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Payment has not been successfully deleted !");
                ex.printStackTrace();
            }
            break;
            case "receipt":
                      try {
                int isDelete = JOptionPane.showConfirmDialog(null, "Are you sure ? ", "Delete", JOptionPane.YES_NO_OPTION);
                if (isDelete == JOptionPane.YES_OPTION) {
                    receiptService.deleteReceipt(selectedRow);
                    JOptionPane.showMessageDialog(null, "Receipt has been successfully deleted !");
                    showReceiptData();
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Receipt has not been successfully deleted !");
                ex.printStackTrace();
            }
            break;
            default:
                JOptionPane.showMessageDialog(null, "Please first choose menu.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        btnSearchActionPerformed(null);
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            String keyword = txtSearch.getText();
            switch (btnCurrent) {
                case "patient":
                    List<Patient> patients = patientService.searchPatientData(keyword);
                    showPatientData(patients);
                    break;
                case "doctor":
                    List<Doctor> doctors = doctorService.searchDoctorData(keyword);
                    showDoctorData(doctors);
                    break;
                case "registration":
                    List<Registration> registrations = registrationService.searchRegistrationData(keyword);
                    showRegistrationData();
                    break;
                case "payment":
                    List<Payment> payments = paymentService.searchPaymentData(keyword);
                    showPaymentData();
                    break;
//                case "receipt":
//                    
//                    showReceiptData();
//                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Please first choose menu.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void jPanel2ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel2ComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel2ComponentResized

    private void btdSignOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btdSignOutActionPerformed
        LoginFrame lf = new LoginFrame();
        lf.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btdSignOutActionPerformed

    private void showPatientData(List<Patient> patients) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            tblGeneral.setModel(model);
            model.addColumn("ID");
            model.addColumn("N");
            model.addColumn("Name");
            model.addColumn("Surname");
            model.addColumn("DOB");
            model.addColumn("Address");
            model.addColumn("Phone");

            for (Patient patient : patients) {
                Object[] obj = new Object[]{
                    patient.getId(), patient.getR(), patient.getName(), patient.getSurName(),
                    patient.getDob(), patient.getAddress(),
                    patient.getPhone()
                };
                tblGeneral.getColumnModel().getColumn(0).setMinWidth(0);
                tblGeneral.getColumnModel().getColumn(0).setMaxWidth(0);
                tblGeneral.getColumnModel().getColumn(0).setWidth(0);
                model.addRow(obj);
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    private void showDoctorData(List<Doctor> doctors) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            tblGeneral.setModel(model);
            model.addColumn("ID");
            model.addColumn("N");
            model.addColumn("Name");
            model.addColumn("Surname");
            model.addColumn("DOB");
            model.addColumn("Address");
            model.addColumn("Email");
            model.addColumn("Salary");
            model.addColumn("Phone");
            model.addColumn("Work Experience");
            model.addColumn("Portion");
//            List<Doctor> doctors = doctorService.getDoctorList();
            for (Doctor doctor : doctors) {
                Object[] obj = new Object[]{
                    doctor.getId(), doctor.getR(), doctor.getName(), doctor.getSurName(),
                    doctor.getDob(), doctor.getAddress(),
                    doctor.getEmail(), doctor.getSalary(), doctor.getPhone(),
                    doctor.getWorkExperience(), doctor.getPortion()
                };
                tblGeneral.getColumnModel().getColumn(0).setMinWidth(0);
                tblGeneral.getColumnModel().getColumn(0).setMaxWidth(0);
                tblGeneral.getColumnModel().getColumn(0).setWidth(0);
                model.addRow(obj);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    private void showRegistrationData() {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            tblGeneral.setModel(model);
            model.addColumn("ID");
            model.addColumn("N");
            model.addColumn("Patient Name");
            model.addColumn("Doctor Name");
            model.addColumn("Disease Name");
            model.addColumn("Room");
            model.addColumn("Date");

            List<Registration> registrations = registrationService.getRegistationList(1);
            for (Registration registration : registrations) {
                String patientName = registration.getPatient().getName() + " " + registration.getPatient().getSurName();
                String doctorName = registration.getDoctor().getName() + " " + registration.getDoctor().getSurName();
                Object[] obj = new Object[]{
                    registration.getId(), registration.getR(), patientName, doctorName, registration.getDisease().getName(), registration.getRoom().getRoomNumber(), registration.getDate()
                };
                tblGeneral.getColumnModel().getColumn(0).setMinWidth(0);
                tblGeneral.getColumnModel().getColumn(0).setMaxWidth(0);
                tblGeneral.getColumnModel().getColumn(0).setWidth(0);
                model.addRow(obj);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void showPaymentData() {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            tblGeneral.setModel(model);
            model.addColumn("ID");
            model.addColumn("N");
            model.addColumn("Patient Name");
            model.addColumn("Doctor Name");
            model.addColumn("Disease Name");
            model.addColumn("Amount");
            List<Payment> payments = paymentService.getPaymentList();
            for (Payment payment : payments) {
                String patientName = payment.getRegistration().getPatient().getName() + " " + payment.getRegistration().getPatient().getSurName();
                String doctorName = payment.getRegistration().getDoctor().getName() + " " + payment.getRegistration().getDoctor().getSurName();

                Object[] obj = new Object[]{
                    payment.getId(), payment.getR(), patientName, doctorName, payment.getRegistration().getDisease().getName(), payment.getTotalAmount(),};
                model.addRow(obj);
            }
            tblGeneral.getColumnModel().getColumn(0).setMinWidth(0);
            tblGeneral.getColumnModel().getColumn(0).setMaxWidth(0);
            tblGeneral.getColumnModel().getColumn(0).setWidth(0);
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void showReceiptData() {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            tblGeneral.setModel(model);
            model.addColumn("ID");
            model.addColumn("N");
            model.addColumn("Patient Name");
            model.addColumn("Doctor Name");
            model.addColumn("Disease Name");
            model.addColumn("Medicine");
            model.addColumn("Date");
            List<Receipt> receipts = receiptService.getReceiptList();
            for (Receipt receipt : receipts) {
                String patientName = receipt.getRegistration().getPatient().getName() + " " + receipt.getRegistration().getPatient().getSurName();
                String doctorName = receipt.getRegistration().getDoctor().getName() + " " + receipt.getRegistration().getDoctor().getSurName();
                Object[] obj = new Object[]{
                    receipt.getId(), receipt.getR(), patientName, doctorName,
                    receipt.getRegistration().getDisease().getName(),
                    receipt.getMedicineName(),
                    receipt.getData_date()
                };
                tblGeneral.getColumnModel().getColumn(0).setMinWidth(0);
                tblGeneral.getColumnModel().getColumn(0).setMaxWidth(0);
                tblGeneral.getColumnModel().getColumn(0).setWidth(0);
                model.addRow(obj);
            }
            model.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void grantrole() {
        if (userType.equalsIgnoreCase("patient")) {
            btnNew.setVisible(false);
            lblNewIcon.setVisible(false);
            btnEdit.setVisible(false);
            lblEditIcon.setVisible(false);
            btnDelete.setVisible(false);
            lblDeleteIcon.setVisible(false);
        } else if (userType.equalsIgnoreCase("doctor")) {
            btnNew.setVisible(false);
            lblNewIcon.setVisible(false);
            btnEdit.setVisible(false);
            lblEditIcon.setVisible(false);
            btnDelete.setVisible(false);
            lblDeleteIcon.setVisible(false);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btdSignOut;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDoctorData;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnPatientData;
    private javax.swing.JButton btnPaymentData;
    private javax.swing.JButton btnReceiptData;
    private javax.swing.JButton btnRegistrationData;
    private javax.swing.JButton btnSearch;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDeleteIcon;
    private javax.swing.JLabel lblDoctorIcn;
    private javax.swing.JLabel lblEditIcon;
    private javax.swing.JLabel lblNewIcon;
    private javax.swing.JLabel lblPatientIcn;
    private javax.swing.JLabel lblPaymentIcn;
    private javax.swing.JLabel lblReceiptIcn;
    private javax.swing.JLabel lblRegisterIcn;
    private javax.swing.JTable tblGeneral;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
